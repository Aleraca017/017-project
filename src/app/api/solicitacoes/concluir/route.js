import { NextResponse } from "next/server";
import { doc, updateDoc, addDoc, collection, serverTimestamp } from "firebase/firestore";
import { dbSolicitacoes } from "@/lib/firebase-solicitacoes";
import { db } from "@/lib/firebase";
import nodemailer from "nodemailer";

export async function POST(req) {
    try {
        const body = await req.json();
        console.log("üì© Dados recebidos na rota /concluir:", body);

        const { id, atendidoPorEmail, atendidoPorNome } = body;

        // üîπ Fallback se o email vier vazio
        if (!id) {
            return NextResponse.json({ success: false, error: "ID da solicita√ß√£o n√£o informado." });
        }
        if (!atendidoPorEmail) {
            console.error("‚ùå Campo atendidoPorEmail est√° indefinido!");
            return NextResponse.json({ success: false, error: "E-mail do atendente n√£o informado." });
        }

        // üîπ Atualiza status e registra conclus√£o
        const solRef = doc(dbSolicitacoes, "chamados", id);
        await updateDoc(solRef, {
            status: "concluido",
            concluidoEm: serverTimestamp(),
            concluidoPor: atendidoPorNome || atendidoPorEmail,
            concluidoPorEmail: atendidoPorEmail,
        });

        // üîπ Cria documento no financeiro
        await addDoc(collection(db, "financeiro"), {
            solicitacaoId: id,
            concluidoPor: atendidoPorNome || atendidoPorEmail,
            emailConcluinte: atendidoPorEmail,
            criadoEm: serverTimestamp(),
        });

        // üîπ Configura transporte do e-mail
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.SMTP_USER,
                pass: process.env.SMTP_PASS,
            },
        });

        // üîπ Garante que o e-mail n√£o ser√° vazio
        const destinatario = atendidoPorEmail?.trim();
        if (!destinatario) throw new Error("Destinat√°rio do e-mail indefinido.");

        const mailOptions = {
            from: `"Suporte 017Tag" <${process.env.SMTP_USER}>`,
            to: destinatario,
            subject: "Registro de atendimento conclu√≠do",
            html: `
        <p>Ol√° ${atendidoPorNome || ""},</p>
        <p>Registre seu atendimento pelo forum (Suporte > Forum de tratativas) para ser efetuado o pagamento.</p>
        <p><strong>ID da solicita√ß√£o:</strong> ${id}</p>
        <hr />
        <p style="font-size:12px;color:#777;">Mensagem autom√°tica - n√£o responda este e-mail.</p>
      `,
        };

        console.log("üì§ Enviando e-mail para:", destinatario);
        await transporter.sendMail(mailOptions);

        return NextResponse.json({ success: true });
    } catch (error) {
        console.error("‚ùå Erro ao concluir solicita√ß√£o:", error);
        return NextResponse.json({
            success: false,
            error: error.message || "Erro interno ao concluir solicita√ß√£o.",
        });
    }
}
